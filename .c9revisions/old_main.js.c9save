{"ts":1359659418623,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//const device = '/dev/tty.usbserial-A100DUTY';\nconst device = '/dev/tty.usbmodem621';\nconst serial = chrome.serial;\nconst timeout = 100;\n\nfunction SerialConnection() {\n  this.connectionId = -1;\n  this.callbacks = {};\n}\n\nSerialConnection.prototype.connect = function(device, callback) {\n  serial.open(device, this.onOpen.bind(this))\n  this.callbacks.connect = callback;\n};\n\nSerialConnection.prototype.read = function(callback) {\n  // Only works for open serial ports.\n  if (this.connectionId < 0) {\n    throw 'Invalid connection';\n  }\n  serial.read(this.connectionId, 1, this.onRead.bind(this));\n  this.callbacks.read = callback;\n};\n\nSerialConnection.prototype.readLine = function(callback) {\n  // Only works for open serial ports.\n  if (this.connectionId < 0) {\n    throw 'Invalid connection';\n  }\n  var line = '';\n\n  // Keep reading bytes until we've found a newline.\n  var readLineHelper = function(readInfo) {\n    var char = readInfo.message;\n    if (char == '') {\n      // Nothing in the buffer. Try reading again after a small timeout.\n      setTimeout(function() {\n        this.read(readLineHelper);\n      }.bind(this), timeout);\n      return;\n    }\n    if (char == '\\n') {\n      // End of line.\n      callback(line);\n      line = '';\n    }\n    line += char;\n    this.read(readLineHelper)\n  }.bind(this)\n\n  this.read(readLineHelper);\n};\n\nSerialConnection.prototype.write = function(msg, callback) {\n  // Only works for open serial ports.\n  if (this.connectionId < 0) {\n    throw 'Invalid connection';\n  }\n  this.callbacks.write = callback;\n  this._stringToArrayBuffer(msg, function(array) {\n    serial.write(this.connectionId, array, this.onWrite.bind(this));\n  }.bind(this));\n};\n\nSerialConnection.prototype.onOpen = function(connectionInfo) {\n  this.connectionId = connectionInfo.connectionId;\n  if (this.callbacks.connect) {\n    this.callbacks.connect();\n  }\n};\n\nSerialConnection.prototype.onRead = function(readInfo) {\n  if (this.callbacks.read) {\n    this.callbacks.read(readInfo);\n  }\n};\n\nSerialConnection.prototype.onWrite = function(writeInfo) {\n  log('wrote:' + writeInfo.bytesWritten);\n  if (this.callbacks.write) {\n    this.callbacks.write(writeInfo);\n  }\n};\n\n/** From tcp-client */\nSerialConnection.prototype._arrayBufferToString = function(buf, callback) {\n  var bb = new WebKitBlobBuilder();\n  bb.append(buf);\n  var f = new FileReader();\n  f.onload = function(e) {\n    callback(e.target.result)\n  }\n  f.readAsText(bb.getBlob());\n}\n\nSerialConnection.prototype._stringToArrayBuffer = function(str, callback) {\n  var bb = new WebKitBlobBuilder();\n  bb.append(str);\n  var f = new FileReader();\n  f.onload = function(e) {\n    callback(e.target.result);\n  }\n  f.readAsArrayBuffer(bb.getBlob());\n}\n\n\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n\nvar ser = new SerialConnection();\nser.connect(device, function() {\n  log('connected to: ' + device);\n  ser.write('hello arduino', function() {\n  });\n  readNextLine();\n});\n\nfunction readNextLine() {\n  ser.readLine(function(line) {\n    log('readline: ' + line);\n    readNextLine();\n  });\n}\n\nfunction log(msg) {\n  var buffer = document.querySelector('#buffer');\n  buffer.innerHTML += msg + '<br/>';\n}\n\nvar is_on = false;\ndocument.querySelector('button').addEventListener('click', function() {\n  is_on = !is_on;\n  ser.write(is_on ? 'y' : 'n');\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":3486}]],"length":3486}
{"contributors":[],"silentsave":false,"ts":1359659529609,"patch":[[{"diffs":[[0,"ar b"],[1,"lo"],[0,"b = new "],[-1,"WebKitBlobBuilder();\n  bb.append("],[1,"Blob(["],[0,"buf"],[1,"]"],[0,");\n "]],"start1":2279,"start2":2279,"length1":52,"length2":28},{"diffs":[[0,"AsText(b"],[-1,"b.getB"],[0,"lob"],[-1,"()"],[0,");\n}\n\nSe"]],"start1":2403,"start2":2403,"length1":27,"length2":19},{"diffs":[[0,"ar b"],[1,"lo"],[0,"b = new "],[-1,"WebKitBlobBuilder();\n  bb.append("],[1,"Blob(["],[0,"str"],[1,"]"],[0,");\n "]],"start1":2499,"start2":2499,"length1":52,"length2":28},{"diffs":[[0,"er(b"],[-1,"b.getB"],[0,"lob"],[-1,"()"],[0,");\n}"]],"start1":2635,"start2":2635,"length1":19,"length2":11}]],"length":3422,"saved":false}
{"contributors":[],"silentsave":false,"ts":1359660499302,"patch":[[{"diffs":[[0,"/tty"],[-1,".usbmodem621"],[1,"ACM0"],[0,"';\nc"]],"start1":68,"start2":68,"length1":20,"length2":12}]],"length":3414,"saved":false}
